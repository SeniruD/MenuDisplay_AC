
AVR_C.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000008  00800100  000001ac  00000220  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001ac  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000228  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000258  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000058  00000000  00000000  00000298  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000b58  00000000  00000000  000002f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000749  00000000  00000000  00000e48  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000441  00000000  00000000  00001591  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000a0  00000000  00000000  000019d4  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003f7  00000000  00000000  00001a74  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000003f4  00000000  00000000  00001e6b  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000048  00000000  00000000  0000225f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   8:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  10:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  14:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  18:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  1c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  20:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  24:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  28:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  2c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  30:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  34:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  38:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  3c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  40:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  44:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  48:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  4c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  50:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  54:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  58:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  5c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  60:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  64:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ec ea       	ldi	r30, 0xAC	; 172
  7c:	f1 e0       	ldi	r31, 0x01	; 1
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a8 30       	cpi	r26, 0x08	; 8
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>
  8a:	0e 94 c6 00 	call	0x18c	; 0x18c <main>
  8e:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <_exit>

00000092 <__bad_interrupt>:
  92:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000096 <LCD_CmdWrite>:
	LCD_CmdWrite(Line1);
}

void LCD_GoToLineOne()
{
	LCD_CmdWrite(Line1);	// Move the Cursor to First line First Position
  96:	98 2f       	mov	r25, r24
  98:	90 7f       	andi	r25, 0xF0	; 240
  9a:	95 b9       	out	0x05, r25	; 5
  9c:	2b 98       	cbi	0x05, 3	; 5
  9e:	2a 9a       	sbi	0x05, 2	; 5
  a0:	ef ee       	ldi	r30, 0xEF	; 239
  a2:	f0 e0       	ldi	r31, 0x00	; 0
  a4:	31 97       	sbiw	r30, 0x01	; 1
  a6:	f1 f7       	brne	.-4      	; 0xa4 <LCD_CmdWrite+0xe>
  a8:	00 c0       	rjmp	.+0      	; 0xaa <LCD_CmdWrite+0x14>
  aa:	00 00       	nop
  ac:	2a 98       	cbi	0x05, 2	; 5
  ae:	fa e1       	ldi	r31, 0x1A	; 26
  b0:	fa 95       	dec	r31
  b2:	f1 f7       	brne	.-4      	; 0xb0 <LCD_CmdWrite+0x1a>
  b4:	00 c0       	rjmp	.+0      	; 0xb6 <LCD_CmdWrite+0x20>
  b6:	20 e1       	ldi	r18, 0x10	; 16
  b8:	82 9f       	mul	r24, r18
  ba:	c0 01       	movw	r24, r0
  bc:	11 24       	eor	r1, r1
  be:	85 b9       	out	0x05, r24	; 5
  c0:	2b 98       	cbi	0x05, 3	; 5
  c2:	2a 9a       	sbi	0x05, 2	; 5
  c4:	8f ee       	ldi	r24, 0xEF	; 239
  c6:	90 e0       	ldi	r25, 0x00	; 0
  c8:	01 97       	sbiw	r24, 0x01	; 1
  ca:	f1 f7       	brne	.-4      	; 0xc8 <LCD_CmdWrite+0x32>
  cc:	00 c0       	rjmp	.+0      	; 0xce <LCD_CmdWrite+0x38>
  ce:	00 00       	nop
  d0:	2a 98       	cbi	0x05, 2	; 5
  d2:	ef ec       	ldi	r30, 0xCF	; 207
  d4:	f7 e0       	ldi	r31, 0x07	; 7
  d6:	31 97       	sbiw	r30, 0x01	; 1
  d8:	f1 f7       	brne	.-4      	; 0xd6 <LCD_CmdWrite+0x40>
  da:	00 c0       	rjmp	.+0      	; 0xdc <LCD_CmdWrite+0x46>
  dc:	00 00       	nop
  de:	08 95       	ret

000000e0 <LCD_Init>:
  e0:	2f e7       	ldi	r18, 0x7F	; 127
  e2:	88 e3       	ldi	r24, 0x38	; 56
  e4:	91 e0       	ldi	r25, 0x01	; 1
  e6:	21 50       	subi	r18, 0x01	; 1
  e8:	80 40       	sbci	r24, 0x00	; 0
  ea:	90 40       	sbci	r25, 0x00	; 0
  ec:	e1 f7       	brne	.-8      	; 0xe6 <LCD_Init+0x6>
  ee:	00 c0       	rjmp	.+0      	; 0xf0 <LCD_Init+0x10>
  f0:	00 00       	nop
  f2:	8d ef       	ldi	r24, 0xFD	; 253
  f4:	84 b9       	out	0x04, r24	; 4
  f6:	82 e0       	ldi	r24, 0x02	; 2
  f8:	0e 94 4b 00 	call	0x96	; 0x96 <LCD_CmdWrite>
  fc:	88 e2       	ldi	r24, 0x28	; 40
  fe:	0e 94 4b 00 	call	0x96	; 0x96 <LCD_CmdWrite>
 102:	8c e0       	ldi	r24, 0x0C	; 12
 104:	0e 94 4b 00 	call	0x96	; 0x96 <LCD_CmdWrite>
 108:	81 e0       	ldi	r24, 0x01	; 1
 10a:	0e 94 4b 00 	call	0x96	; 0x96 <LCD_CmdWrite>
 10e:	80 e8       	ldi	r24, 0x80	; 128
 110:	0e 94 4b 00 	call	0x96	; 0x96 <LCD_CmdWrite>
 114:	08 95       	ret

00000116 <LCD_DataWrite>:
 116:	98 2f       	mov	r25, r24
 118:	90 7f       	andi	r25, 0xF0	; 240
 11a:	95 b9       	out	0x05, r25	; 5
 11c:	2b 9a       	sbi	0x05, 3	; 5
 11e:	2a 9a       	sbi	0x05, 2	; 5
 120:	ef ee       	ldi	r30, 0xEF	; 239
 122:	f0 e0       	ldi	r31, 0x00	; 0
 124:	31 97       	sbiw	r30, 0x01	; 1
 126:	f1 f7       	brne	.-4      	; 0x124 <LCD_DataWrite+0xe>
 128:	00 c0       	rjmp	.+0      	; 0x12a <LCD_DataWrite+0x14>
 12a:	00 00       	nop
 12c:	2a 98       	cbi	0x05, 2	; 5
 12e:	fa e1       	ldi	r31, 0x1A	; 26
 130:	fa 95       	dec	r31
 132:	f1 f7       	brne	.-4      	; 0x130 <LCD_DataWrite+0x1a>
 134:	00 c0       	rjmp	.+0      	; 0x136 <LCD_DataWrite+0x20>
 136:	20 e1       	ldi	r18, 0x10	; 16
 138:	82 9f       	mul	r24, r18
 13a:	c0 01       	movw	r24, r0
 13c:	11 24       	eor	r1, r1
 13e:	85 b9       	out	0x05, r24	; 5
 140:	2b 9a       	sbi	0x05, 3	; 5
 142:	2a 9a       	sbi	0x05, 2	; 5
 144:	8f ee       	ldi	r24, 0xEF	; 239
 146:	90 e0       	ldi	r25, 0x00	; 0
 148:	01 97       	sbiw	r24, 0x01	; 1
 14a:	f1 f7       	brne	.-4      	; 0x148 <LCD_DataWrite+0x32>
 14c:	00 c0       	rjmp	.+0      	; 0x14e <LCD_DataWrite+0x38>
 14e:	00 00       	nop
 150:	2a 98       	cbi	0x05, 2	; 5
 152:	ef ec       	ldi	r30, 0xCF	; 207
 154:	f7 e0       	ldi	r31, 0x07	; 7
 156:	31 97       	sbiw	r30, 0x01	; 1
 158:	f1 f7       	brne	.-4      	; 0x156 <LCD_DataWrite+0x40>
 15a:	00 c0       	rjmp	.+0      	; 0x15c <LCD_DataWrite+0x46>
 15c:	00 00       	nop
 15e:	08 95       	ret

00000160 <LCD_Clear>:
 160:	81 e0       	ldi	r24, 0x01	; 1
 162:	0e 94 4b 00 	call	0x96	; 0x96 <LCD_CmdWrite>
 166:	80 e8       	ldi	r24, 0x80	; 128
 168:	0e 94 4b 00 	call	0x96	; 0x96 <LCD_CmdWrite>
 16c:	08 95       	ret

0000016e <LCD_DisplayString>:
}

void LCD_DisplayString(char *string_ptr)
{
 16e:	cf 93       	push	r28
 170:	df 93       	push	r29
 172:	ec 01       	movw	r28, r24
	while(*string_ptr)
 174:	88 81       	ld	r24, Y
 176:	88 23       	and	r24, r24
 178:	31 f0       	breq	.+12     	; 0x186 <LCD_DisplayString+0x18>
 17a:	21 96       	adiw	r28, 0x01	; 1
	LCD_DataWrite(*string_ptr++);
 17c:	0e 94 8b 00 	call	0x116	; 0x116 <LCD_DataWrite>
	LCD_CmdWrite(Line1);	// Move the Cursor to First line First Position
}

void LCD_DisplayString(char *string_ptr)
{
	while(*string_ptr)
 180:	89 91       	ld	r24, Y+
 182:	81 11       	cpse	r24, r1
 184:	fb cf       	rjmp	.-10     	; 0x17c <LCD_DisplayString+0xe>
	LCD_DataWrite(*string_ptr++);
}
 186:	df 91       	pop	r29
 188:	cf 91       	pop	r28
 18a:	08 95       	ret

0000018c <main>:
void LCD_Clear();


int main(void)
{
	DDRD = 0x00; //Set PORTD as input pins
 18c:	1a b8       	out	0x0a, r1	; 10
    PORTD = 0xF0; //Set PD0, PD1, PD6, PD7 to INPUT PULL_UP
 18e:	80 ef       	ldi	r24, 0xF0	; 240
 190:	8b b9       	out	0x0b, r24	; 11
	
	LCD_Init();
 192:	0e 94 70 00 	call	0xe0	; 0xe0 <LCD_Init>
	LCD_Clear(0x0C);
 196:	8c e0       	ldi	r24, 0x0C	; 12
 198:	90 e0       	ldi	r25, 0x00	; 0
 19a:	0e 94 b0 00 	call	0x160	; 0x160 <LCD_Clear>
	LCD_DisplayString("Seniru");
 19e:	80 e0       	ldi	r24, 0x00	; 0
 1a0:	91 e0       	ldi	r25, 0x01	; 1
 1a2:	0e 94 b7 00 	call	0x16e	; 0x16e <LCD_DisplayString>
 1a6:	ff cf       	rjmp	.-2      	; 0x1a6 <main+0x1a>

000001a8 <_exit>:
 1a8:	f8 94       	cli

000001aa <__stop_program>:
 1aa:	ff cf       	rjmp	.-2      	; 0x1aa <__stop_program>
