
AVR_C.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000008  00800100  000001c8  0000023c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001c8  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000244  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000274  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000068  00000000  00000000  000002b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000c59  00000000  00000000  0000031c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000749  00000000  00000000  00000f75  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000004d6  00000000  00000000  000016be  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000c0  00000000  00000000  00001b94  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000415  00000000  00000000  00001c54  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000514  00000000  00000000  00002069  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000058  00000000  00000000  0000257d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   8:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  10:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  14:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  18:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  1c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  20:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  24:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  28:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  2c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  30:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  34:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  38:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  3c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  40:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  44:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  48:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  4c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  50:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  54:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  58:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  5c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  60:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  64:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e8 ec       	ldi	r30, 0xC8	; 200
  7c:	f1 e0       	ldi	r31, 0x01	; 1
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a8 30       	cpi	r26, 0x08	; 8
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>
  8a:	0e 94 bd 00 	call	0x17a	; 0x17a <main>
  8e:	0c 94 e2 00 	jmp	0x1c4	; 0x1c4 <_exit>

00000092 <__bad_interrupt>:
  92:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000096 <LCD_CmdWrite>:
}

void LCD_Clear()
{
	LCD_CmdWrite(0x01);	// Clear the LCD and go to First line First Position
	LCD_CmdWrite(Line1);
  96:	98 2f       	mov	r25, r24
  98:	90 7f       	andi	r25, 0xF0	; 240
  9a:	9b b9       	out	0x0b, r25	; 11
  9c:	2c 98       	cbi	0x05, 4	; 5
  9e:	2b 9a       	sbi	0x05, 3	; 5
  a0:	22 e0       	ldi	r18, 0x02	; 2
  a2:	2a 95       	dec	r18
  a4:	f1 f7       	brne	.-4      	; 0xa2 <LCD_CmdWrite+0xc>
  a6:	00 c0       	rjmp	.+0      	; 0xa8 <LCD_CmdWrite+0x12>
  a8:	2b 98       	cbi	0x05, 3	; 5
  aa:	9a e1       	ldi	r25, 0x1A	; 26
  ac:	9a 95       	dec	r25
  ae:	f1 f7       	brne	.-4      	; 0xac <LCD_CmdWrite+0x16>
  b0:	00 c0       	rjmp	.+0      	; 0xb2 <LCD_CmdWrite+0x1c>
  b2:	20 e1       	ldi	r18, 0x10	; 16
  b4:	82 9f       	mul	r24, r18
  b6:	c0 01       	movw	r24, r0
  b8:	11 24       	eor	r1, r1
  ba:	8b b9       	out	0x0b, r24	; 11
  bc:	2c 98       	cbi	0x05, 4	; 5
  be:	2b 9a       	sbi	0x05, 3	; 5
  c0:	82 e0       	ldi	r24, 0x02	; 2
  c2:	8a 95       	dec	r24
  c4:	f1 f7       	brne	.-4      	; 0xc2 <LCD_CmdWrite+0x2c>
  c6:	00 c0       	rjmp	.+0      	; 0xc8 <LCD_CmdWrite+0x32>
  c8:	2b 98       	cbi	0x05, 3	; 5
  ca:	8f ec       	ldi	r24, 0xCF	; 207
  cc:	97 e0       	ldi	r25, 0x07	; 7
  ce:	01 97       	sbiw	r24, 0x01	; 1
  d0:	f1 f7       	brne	.-4      	; 0xce <LCD_CmdWrite+0x38>
  d2:	00 c0       	rjmp	.+0      	; 0xd4 <LCD_CmdWrite+0x3e>
  d4:	00 00       	nop
  d6:	08 95       	ret

000000d8 <LCD_Init>:
  d8:	2f e7       	ldi	r18, 0x7F	; 127
  da:	88 e3       	ldi	r24, 0x38	; 56
  dc:	91 e0       	ldi	r25, 0x01	; 1
  de:	21 50       	subi	r18, 0x01	; 1
  e0:	80 40       	sbci	r24, 0x00	; 0
  e2:	90 40       	sbci	r25, 0x00	; 0
  e4:	e1 f7       	brne	.-8      	; 0xde <LCD_Init+0x6>
  e6:	00 c0       	rjmp	.+0      	; 0xe8 <LCD_Init+0x10>
  e8:	00 00       	nop
  ea:	82 e0       	ldi	r24, 0x02	; 2
  ec:	0e 94 4b 00 	call	0x96	; 0x96 <LCD_CmdWrite>
  f0:	88 e2       	ldi	r24, 0x28	; 40
  f2:	0e 94 4b 00 	call	0x96	; 0x96 <LCD_CmdWrite>
  f6:	8c e0       	ldi	r24, 0x0C	; 12
  f8:	0e 94 4b 00 	call	0x96	; 0x96 <LCD_CmdWrite>
  fc:	81 e0       	ldi	r24, 0x01	; 1
  fe:	0e 94 4b 00 	call	0x96	; 0x96 <LCD_CmdWrite>
 102:	80 e8       	ldi	r24, 0x80	; 128
 104:	0e 94 4b 00 	call	0x96	; 0x96 <LCD_CmdWrite>
 108:	08 95       	ret

0000010a <LCD_DataWrite>:
 10a:	98 2f       	mov	r25, r24
 10c:	90 7f       	andi	r25, 0xF0	; 240
 10e:	9b b9       	out	0x0b, r25	; 11
 110:	2c 9a       	sbi	0x05, 4	; 5
 112:	2b 9a       	sbi	0x05, 3	; 5
 114:	ef e1       	ldi	r30, 0x1F	; 31
 116:	fe e4       	ldi	r31, 0x4E	; 78
 118:	31 97       	sbiw	r30, 0x01	; 1
 11a:	f1 f7       	brne	.-4      	; 0x118 <LCD_DataWrite+0xe>
 11c:	00 c0       	rjmp	.+0      	; 0x11e <LCD_DataWrite+0x14>
 11e:	00 00       	nop
 120:	2b 98       	cbi	0x05, 3	; 5
 122:	fa e1       	ldi	r31, 0x1A	; 26
 124:	fa 95       	dec	r31
 126:	f1 f7       	brne	.-4      	; 0x124 <LCD_DataWrite+0x1a>
 128:	00 c0       	rjmp	.+0      	; 0x12a <LCD_DataWrite+0x20>
 12a:	20 e1       	ldi	r18, 0x10	; 16
 12c:	82 9f       	mul	r24, r18
 12e:	c0 01       	movw	r24, r0
 130:	11 24       	eor	r1, r1
 132:	8b b9       	out	0x0b, r24	; 11
 134:	2c 9a       	sbi	0x05, 4	; 5
 136:	2b 9a       	sbi	0x05, 3	; 5
 138:	8f e1       	ldi	r24, 0x1F	; 31
 13a:	9e e4       	ldi	r25, 0x4E	; 78
 13c:	01 97       	sbiw	r24, 0x01	; 1
 13e:	f1 f7       	brne	.-4      	; 0x13c <LCD_DataWrite+0x32>
 140:	00 c0       	rjmp	.+0      	; 0x142 <LCD_DataWrite+0x38>
 142:	00 00       	nop
 144:	2b 98       	cbi	0x05, 3	; 5
 146:	ef ec       	ldi	r30, 0xCF	; 207
 148:	f7 e0       	ldi	r31, 0x07	; 7
 14a:	31 97       	sbiw	r30, 0x01	; 1
 14c:	f1 f7       	brne	.-4      	; 0x14a <LCD_DataWrite+0x40>
 14e:	00 c0       	rjmp	.+0      	; 0x150 <LCD_DataWrite+0x46>
 150:	00 00       	nop
 152:	08 95       	ret

00000154 <LCD_GoToLineOne>:
}

void LCD_GoToLineOne()
{
	LCD_CmdWrite(Line1);	// Move the Cursor to First line First Position
 154:	80 e8       	ldi	r24, 0x80	; 128
 156:	0e 94 4b 00 	call	0x96	; 0x96 <LCD_CmdWrite>
 15a:	08 95       	ret

0000015c <LCD_DisplayString>:
}

void LCD_DisplayString(char *string_ptr)
{
 15c:	cf 93       	push	r28
 15e:	df 93       	push	r29
 160:	ec 01       	movw	r28, r24
	while(*string_ptr)
 162:	88 81       	ld	r24, Y
 164:	88 23       	and	r24, r24
 166:	31 f0       	breq	.+12     	; 0x174 <LCD_DisplayString+0x18>
 168:	21 96       	adiw	r28, 0x01	; 1
		LCD_DataWrite(*string_ptr++);
 16a:	0e 94 85 00 	call	0x10a	; 0x10a <LCD_DataWrite>
	LCD_CmdWrite(Line1);	// Move the Cursor to First line First Position
}

void LCD_DisplayString(char *string_ptr)
{
	while(*string_ptr)
 16e:	89 91       	ld	r24, Y+
 170:	81 11       	cpse	r24, r1
 172:	fb cf       	rjmp	.-10     	; 0x16a <LCD_DisplayString+0xe>
		LCD_DataWrite(*string_ptr++);
}
 174:	df 91       	pop	r29
 176:	cf 91       	pop	r28
 178:	08 95       	ret

0000017a <main>:
void LCD_Clear();


int main(void)
{
	DDRD = 0x3C; //Set PORTD input output pins
 17a:	8c e3       	ldi	r24, 0x3C	; 60
 17c:	8a b9       	out	0x0a, r24	; 10
    PORTD = BV(0) | BV(1) | BV(6) | BV(7); //Set PD0, PD1, PD6, PD7 to INPUT PULL_UP
 17e:	83 ec       	ldi	r24, 0xC3	; 195
 180:	8b b9       	out	0x0b, r24	; 11
	//DDRB = BV(3) | BV(4) | BV(0); //PORTB pin 3 enable - output & pin 4 register select - output
	setBit(DDRB,RS); // register select output
 182:	24 9a       	sbi	0x04, 4	; 4
	setBit(DDRB,En); // enable select output
 184:	23 9a       	sbi	0x04, 3	; 4
	setBit(DDRB,PORTB0); // enable pb0 as output
 186:	20 9a       	sbi	0x04, 0	; 4
	LCD_Init();
 188:	0e 94 6c 00 	call	0xd8	; 0xd8 <LCD_Init>
	LCD_GoToLineOne();
 18c:	0e 94 aa 00 	call	0x154	; 0x154 <LCD_GoToLineOne>
	LCD_DisplayString("seniru");
 190:	80 e0       	ldi	r24, 0x00	; 0
 192:	91 e0       	ldi	r25, 0x01	; 1
 194:	0e 94 ae 00 	call	0x15c	; 0x15c <LCD_DisplayString>
	setBit(PORTB,0);
 198:	28 9a       	sbi	0x05, 0	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 19a:	2f ef       	ldi	r18, 0xFF	; 255
 19c:	89 e6       	ldi	r24, 0x69	; 105
 19e:	98 e1       	ldi	r25, 0x18	; 24
 1a0:	21 50       	subi	r18, 0x01	; 1
 1a2:	80 40       	sbci	r24, 0x00	; 0
 1a4:	90 40       	sbci	r25, 0x00	; 0
 1a6:	e1 f7       	brne	.-8      	; 0x1a0 <main+0x26>
 1a8:	00 c0       	rjmp	.+0      	; 0x1aa <main+0x30>
 1aa:	00 00       	nop
	_delay_ms(1000);
	clearBit(PORTB,0);
 1ac:	28 98       	cbi	0x05, 0	; 5
 1ae:	2f ef       	ldi	r18, 0xFF	; 255
 1b0:	89 e6       	ldi	r24, 0x69	; 105
 1b2:	98 e1       	ldi	r25, 0x18	; 24
 1b4:	21 50       	subi	r18, 0x01	; 1
 1b6:	80 40       	sbci	r24, 0x00	; 0
 1b8:	90 40       	sbci	r25, 0x00	; 0
 1ba:	e1 f7       	brne	.-8      	; 0x1b4 <main+0x3a>
 1bc:	00 c0       	rjmp	.+0      	; 0x1be <main+0x44>
 1be:	00 00       	nop
	_delay_ms(1000);
	setBit(PORTB,0);
 1c0:	28 9a       	sbi	0x05, 0	; 5
 1c2:	ff cf       	rjmp	.-2      	; 0x1c2 <main+0x48>

000001c4 <_exit>:
 1c4:	f8 94       	cli

000001c6 <__stop_program>:
 1c6:	ff cf       	rjmp	.-2      	; 0x1c6 <__stop_program>
